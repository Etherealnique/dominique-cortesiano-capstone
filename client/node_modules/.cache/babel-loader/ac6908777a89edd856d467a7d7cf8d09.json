{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\domin\\\\Desktop\\\\Brainstation\\\\dominique-cortesiano-capstone\\\\client\\\\src\\\\components\\\\CoinLineGraph\\\\CoinLineGraph.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"../../config/api\";\nimport { Line } from \"react-chartjs-2\";\nimport { CircularProgress, createTheme, makeStyles, ThemeProvider } from \"@material-ui/core\";\nimport SelectButton from \"../SelectButton/SelectButton\";\nimport { chartDays } from \"../../config/data\";\nimport { CryptoState } from \"../../CryptoContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CoinLineGraph = _ref => {\n  _s();\n\n  let {\n    coin\n  } = _ref;\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const {\n    currency\n  } = CryptoState();\n  const useStyles = makeStyles(theme => ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      padding: 40,\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0\n      }\n    }\n  }));\n  const classes = useStyles();\n\n  const fetchHistoricData = async () => {\n    const {\n      data\n    } = await axios.get(HistoricalChart(coin.id, days, currency));\n    console.log(data.prices);\n    setHistoricData(data.prices);\n  };\n\n  useEffect(() => {\n    fetchHistoricData();\n  }, [days]);\n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: \"#fff\"\n      },\n      type: \"dark\"\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: !historicData ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n      style: {\n        color: \"gold\"\n      },\n      size: 250,\n      thickness: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: historicData.map((coin, index) => {\n            // let date = new Date(coin[0]);\n            // let time =\n            //   date.getHours() > 12\n            //     ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n            //     : `${date.getHours()}:${date.getMinutes()} AM`;\n            // return days === 1 ? time : date.toLocaleDateString();\n            const unixTime = coin[0];\n            let time;\n\n            if (days === 1) {\n              let date = new Date(coin[0]);\n              let time = date.getHours() > 12 ? `${date.getHours() - 12}:${date.getMinutes()} PM` : `${date.getHours()}:${date.getMinutes()} AM`;\n              return days === 1 ? time : date.toLocaleDateString();\n              return time;\n            } else {\n              const date = new Date(unixTime * 100);\n              let month = date.getMonth();\n              let day = date.getDate();\n              let year = date.getFullYear();\n              time = `${month}/${day}/${year}`;\n              return time;\n            }\n\n            coin[0] = time;\n          }),\n          datasets: [{}]\n        },\n        options: {\n          elements: {\n            point: {\n              radius: 1\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          marginTop: 20,\n          justifyContent: \"space-around\",\n          width: \"100%\"\n        },\n        children: chartDays.map(day => /*#__PURE__*/_jsxDEV(SelectButton, {\n          onClick: () => setDays(day.value),\n          selected: day.value === days,\n          children: day.label\n        }, day.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoinLineGraph, \"gY5gImAQTzqCybazfrDdWTlBRYo=\", true);\n\n_c = CoinLineGraph;\nexport default CoinLineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinLineGraph\");","map":{"version":3,"sources":["C:/Users/domin/Desktop/Brainstation/dominique-cortesiano-capstone/client/src/components/CoinLineGraph/CoinLineGraph.js"],"names":["axios","useEffect","useState","HistoricalChart","Line","CircularProgress","createTheme","makeStyles","ThemeProvider","SelectButton","chartDays","CryptoState","CoinLineGraph","coin","historicData","setHistoricData","days","setDays","currency","useStyles","theme","container","width","display","flexDirection","alignItems","justifyContent","marginTop","padding","breakpoints","down","paddingTop","classes","fetchHistoricData","data","get","id","console","log","prices","darkTheme","palette","primary","main","type","color","labels","map","index","unixTime","time","date","Date","getHours","getMinutes","toLocaleDateString","month","getMonth","day","getDate","year","getFullYear","datasets","elements","point","radius","value","label"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"../../config/api\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  CircularProgress,\n  createTheme,\n  makeStyles,\n  ThemeProvider,\n} from \"@material-ui/core\";\nimport SelectButton from \"../SelectButton/SelectButton\";\nimport { chartDays } from \"../../config/data\";\nimport { CryptoState } from \"../../CryptoContext\";\n\nconst CoinLineGraph = ({ coin }) => {\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const { currency } = CryptoState();\n\n  const useStyles = makeStyles((theme) => ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      padding: 40,\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0,\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  const fetchHistoricData = async () => {\n    const { data } = await axios.get(HistoricalChart(coin.id, days, currency));\n    console.log(data.prices);\n    setHistoricData(data.prices);\n  };\n\n  useEffect(() => {\n    fetchHistoricData();\n  }, [days]);\n\n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: \"#fff\",\n      },\n      type: \"dark\",\n    },\n  });\n\n  return (\n    <div className={classes.container}>\n      {!historicData ? (\n        <CircularProgress style={{ color: \"gold\" }} size={250} thickness={1} />\n      ) : (\n        <>\n          <Line\n            data={{\n              labels: historicData.map((coin, index) => {\n                // let date = new Date(coin[0]);\n                // let time =\n                //   date.getHours() > 12\n                //     ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n                //     : `${date.getHours()}:${date.getMinutes()} AM`;\n                // return days === 1 ? time : date.toLocaleDateString();\n                const unixTime = coin[0];\n                let time;\n                if (days === 1) {\n                  let date = new Date(coin[0]);\n                  let time =\n                    date.getHours() > 12\n                      ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n                      : `${date.getHours()}:${date.getMinutes()} AM`;\n                  return days === 1 ? time : date.toLocaleDateString();\n\n                  return time;\n                } else {\n                  const date = new Date(unixTime * 100);\n                  let month = date.getMonth();\n                  let day = date.getDate();\n                  let year = date.getFullYear();\n                  time = `${month}/${day}/${year}`;\n                  return time;\n                }\n                coin[0] = time;\n              }),\n\n              datasets: [{}],\n            }}\n            options={{\n              elements: {\n                point: {\n                  radius: 1,\n                },\n              },\n            }}\n          />\n          <div\n            style={{\n              display: \"flex\",\n              marginTop: 20,\n              justifyContent: \"space-around\",\n              width: \"100%\",\n            }}\n          >\n            {chartDays.map((day) => (\n              <SelectButton\n                key={day.value}\n                onClick={() => setDays(day.value)}\n                selected={day.value === days}\n              >\n                {day.label}\n              </SelectButton>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CoinLineGraph;\n"]},"metadata":{},"sourceType":"module"}