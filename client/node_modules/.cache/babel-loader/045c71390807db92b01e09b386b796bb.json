{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\domin\\\\Desktop\\\\Brainstation\\\\dominique-cortesiano-capstone\\\\client\\\\src\\\\components\\\\CoinInfo\\\\CoinInfo.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"./../../config/api\";\nimport { Line } from \"react-chartjs-2\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { CryptoState } from \"../../CryptoContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CoinInfo = _ref => {\n  _s();\n\n  let {\n    coin\n  } = _ref;\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const {\n    currency\n  } = CryptoState();\n\n  const fetchHistoricData = async () => {\n    const {\n      data\n    } = await axios.get(HistoricalChart(coin.id, days, currency));\n    setHistoricData(data.prices);\n  };\n\n  console.log(\"data\", historicData);\n  useEffect(() => {\n    fetchHistoricData();\n  }, [currency, days]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"coin-info\",\n    children: [\"coin info\", !historicData ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n      style: {\n        color: \"gold\"\n      },\n      size: 250,\n      thickness: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: historicData.map(coin => {\n            let date = new Date(coin[0]);\n            let time = date.getHours() > 12 ? `${date.getHours() - 12}:${date.getMinutes()} PM` : `${date.getHours()}:${date.getMinutes()} AM`;\n            return days === 1 ? time : date.toLocaleDateString();\n          }),\n          datasets: [{\n            data: historicData.map(coin => coin[1]),\n            label: `Price ( Past ${days} Days ) in ${currency}`,\n            borderColor: \"#EEBC1D\"\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoinInfo, \"ektYc6NNCfy6r0nSlXPtT2Ivz/o=\");\n\n_c = CoinInfo;\nexport default CoinInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinInfo\");","map":{"version":3,"sources":["C:/Users/domin/Desktop/Brainstation/dominique-cortesiano-capstone/client/src/components/CoinInfo/CoinInfo.js"],"names":["axios","useEffect","useState","HistoricalChart","Line","CircularProgress","CryptoState","CoinInfo","coin","historicData","setHistoricData","days","setDays","currency","fetchHistoricData","data","get","id","prices","console","log","color","labels","map","date","Date","time","getHours","getMinutes","toLocaleDateString","datasets","label","borderColor"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,WAAT,QAA4B,qBAA5B;;;;AAEA,MAAMC,QAAQ,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AAC7B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,EAAhD;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAeP,WAAW,EAAhC;;AAEA,QAAMQ,iBAAiB,GAAG,YAAY;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,KAAK,CAACgB,GAAN,CAAUb,eAAe,CAACK,IAAI,CAACS,EAAN,EAAUN,IAAV,EAAgBE,QAAhB,CAAzB,CAAvB;AAEAH,IAAAA,eAAe,CAACK,IAAI,CAACG,MAAN,CAAf;AACD,GAJD;;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBX,YAApB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,CAACD,QAAD,EAAWF,IAAX,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BAEG,CAACF,YAAD,gBACC,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAE;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAzB;AAA4C,MAAA,IAAI,EAAE,GAAlD;AAAuD,MAAA,SAAS,EAAE;AAAlE;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,IAAI,EAAE;AACJC,UAAAA,MAAM,EAAEb,YAAY,CAACc,GAAb,CAAkBf,IAAD,IAAU;AACjC,gBAAIgB,IAAI,GAAG,IAAIC,IAAJ,CAASjB,IAAI,CAAC,CAAD,CAAb,CAAX;AACA,gBAAIkB,IAAI,GACNF,IAAI,CAACG,QAAL,KAAkB,EAAlB,GACK,GAAEH,IAAI,CAACG,QAAL,KAAkB,EAAG,IAAGH,IAAI,CAACI,UAAL,EAAkB,KADjD,GAEK,GAAEJ,IAAI,CAACG,QAAL,EAAgB,IAAGH,IAAI,CAACI,UAAL,EAAkB,KAH9C;AAIA,mBAAOjB,IAAI,KAAK,CAAT,GAAae,IAAb,GAAoBF,IAAI,CAACK,kBAAL,EAA3B;AACD,WAPO,CADJ;AASJC,UAAAA,QAAQ,EAAE,CACR;AACEf,YAAAA,IAAI,EAAEN,YAAY,CAACc,GAAb,CAAkBf,IAAD,IAAUA,IAAI,CAAC,CAAD,CAA/B,CADR;AAEEuB,YAAAA,KAAK,EAAG,gBAAepB,IAAK,cAAaE,QAAS,EAFpD;AAGEmB,YAAAA,WAAW,EAAE;AAHf,WADQ;AATN;AADR;AAAA;AAAA;AAAA;AAAA;AADF,qBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA/CD;;GAAMzB,Q;;KAAAA,Q;AAiDN,eAAeA,QAAf","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"./../../config/api\";\nimport { Line } from \"react-chartjs-2\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { CryptoState } from \"../../CryptoContext\";\n\nconst CoinInfo = ({ coin }) => {\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const { currency } = CryptoState();\n\n  const fetchHistoricData = async () => {\n    const { data } = await axios.get(HistoricalChart(coin.id, days, currency));\n\n    setHistoricData(data.prices);\n  };\n\n  console.log(\"data\", historicData);\n\n  useEffect(() => {\n    fetchHistoricData();\n  }, [currency, days]);\n\n  return (\n    <div className=\"coin-info\">\n      coin info\n      {!historicData ? (\n        <CircularProgress style={{ color: \"gold\" }} size={250} thickness={1} />\n      ) : (\n        <>\n          <Line\n            data={{\n              labels: historicData.map((coin) => {\n                let date = new Date(coin[0]);\n                let time =\n                  date.getHours() > 12\n                    ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n                    : `${date.getHours()}:${date.getMinutes()} AM`;\n                return days === 1 ? time : date.toLocaleDateString();\n              }),\n              datasets: [\n                {\n                  data: historicData.map((coin) => coin[1]),\n                  label: `Price ( Past ${days} Days ) in ${currency}`,\n                  borderColor: \"#EEBC1D\",\n                },\n              ],\n            }}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CoinInfo;\n"]},"metadata":{},"sourceType":"module"}