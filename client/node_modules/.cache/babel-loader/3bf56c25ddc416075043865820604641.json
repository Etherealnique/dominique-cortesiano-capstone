{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\domin\\\\Desktop\\\\Brainstation\\\\dominique-cortesiano-capstone\\\\client\\\\src\\\\components\\\\CoinLineGraph\\\\CoinLineGraph.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"../../config/api\";\nimport { Line } from \"react-chartjs-2\";\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\nimport SelectButton from \"../SelectButton/SelectButton\";\nimport { chartDays } from \"../../config/data\";\nimport { CryptoState } from \"../../CryptoContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CoinLineGraph = _ref => {\n  _s();\n\n  let {\n    coin\n  } = _ref;\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const {\n    currency\n  } = CryptoState();\n  const useStyles = makeStyles(theme => ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      marginLeft: \"8rem\",\n      alignItems: \"center\",\n      backgroundColor: \"white\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      // padding: 40,\n      boxShadow: \"3px 3px 10px #00000052\",\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0\n      }\n    }\n  }));\n  const classes = useStyles();\n\n  const fetchHistoricData = async () => {\n    const {\n      data\n    } = await axios.get(HistoricalChart(coin.id, days, currency));\n    console.log(data.prices);\n    setHistoricData(data.prices);\n  };\n\n  useEffect(() => {\n    fetchHistoricData();\n  }, [days]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: !historicData ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n      style: {\n        color: \"99C7BB\"\n      },\n      size: 250,\n      thickness: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Line, {\n        className: \"line-graph\",\n        data: {\n          labels: historicData.map(coin => {\n            let date = new Date(coin[0]);\n            let time = date.getHours() > 12 ? `${date.getHours() - 12}:${date.getMinutes()} PM` : `${date.getHours()}:${date.getMinutes()} AM`;\n            return days === 1 ? time : date.toLocaleDateString();\n          }),\n          datasets: [{\n            data: historicData.map(coin => coin[1]),\n            label: `Price ( Past ${days} Days ) in ${currency}`,\n            borderColor: \"#99C7BB\"\n          }]\n        },\n        options: {\n          elements: {\n            point: {\n              radius: 1\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          marginTop: 20,\n          justifyContent: \"space-around\",\n          width: \"100%\"\n        },\n        children: chartDays.map(day => /*#__PURE__*/_jsxDEV(SelectButton, {\n          onClick: () => setDays(day.value),\n          selected: day.value === days,\n          children: day.label\n        }, day.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoinLineGraph, \"gY5gImAQTzqCybazfrDdWTlBRYo=\", true);\n\n_c = CoinLineGraph;\nexport default CoinLineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinLineGraph\");","map":{"version":3,"sources":["C:/Users/domin/Desktop/Brainstation/dominique-cortesiano-capstone/client/src/components/CoinLineGraph/CoinLineGraph.js"],"names":["axios","useEffect","useState","HistoricalChart","Line","CircularProgress","makeStyles","SelectButton","chartDays","CryptoState","CoinLineGraph","coin","historicData","setHistoricData","days","setDays","currency","useStyles","theme","container","width","display","flexDirection","marginLeft","alignItems","backgroundColor","justifyContent","marginTop","boxShadow","breakpoints","down","padding","paddingTop","classes","fetchHistoricData","data","get","id","console","log","prices","color","labels","map","date","Date","time","getHours","getMinutes","toLocaleDateString","datasets","label","borderColor","elements","point","radius","day","value"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"../../config/api\";\nimport { Line } from \"react-chartjs-2\";\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\nimport SelectButton from \"../SelectButton/SelectButton\";\nimport { chartDays } from \"../../config/data\";\nimport { CryptoState } from \"../../CryptoContext\";\n\nconst CoinLineGraph = ({ coin }) => {\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const { currency } = CryptoState();\n\n  const useStyles = makeStyles((theme) => ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      marginLeft: \"8rem\",\n      alignItems: \"center\",\n      backgroundColor: \"white\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      // padding: 40,\n      boxShadow: \"3px 3px 10px #00000052\",\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0,\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  const fetchHistoricData = async () => {\n    const { data } = await axios.get(HistoricalChart(coin.id, days, currency));\n    console.log(data.prices);\n    setHistoricData(data.prices);\n  };\n\n  useEffect(() => {\n    fetchHistoricData();\n  }, [days]);\n\n  return (\n    <div className={classes.container}>\n      {!historicData ? (\n        <CircularProgress\n          style={{ color: \"99C7BB\" }}\n          size={250}\n          thickness={1}\n        />\n      ) : (\n        <>\n          <Line\n            className=\"line-graph\"\n            data={{\n              labels: historicData.map((coin) => {\n                let date = new Date(coin[0]);\n                let time =\n                  date.getHours() > 12\n                    ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n                    : `${date.getHours()}:${date.getMinutes()} AM`;\n                return days === 1 ? time : date.toLocaleDateString();\n              }),\n\n              datasets: [\n                {\n                  data: historicData.map((coin) => coin[1]),\n                  label: `Price ( Past ${days} Days ) in ${currency}`,\n                  borderColor: \"#99C7BB\",\n                },\n              ],\n            }}\n            options={{\n              elements: {\n                point: {\n                  radius: 1,\n                },\n              },\n            }}\n          />\n          <div\n            style={{\n              display: \"flex\",\n              marginTop: 20,\n              justifyContent: \"space-around\",\n              width: \"100%\",\n            }}\n          >\n            {chartDays.map((day) => (\n              <SelectButton\n                key={day.value}\n                onClick={() => setDays(day.value)}\n                selected={day.value === days}\n              >\n                {day.label}\n              </SelectButton>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CoinLineGraph;\n"]},"metadata":{},"sourceType":"module"}